#pragma checksum "C:\Users\User\Downloads\arcgis-runtime-demos-dotnet-main\arcgis-runtime-demos-dotnet-main\src\OfflineWorkflowsSample\OfflineWorkflowsSample\Views\Controls\MapWithTools.xaml" "{8829d00f-11b8-4213-878b-770e8597ac16}" "F0DFF56C1FA229B84AA95F9B825078FF333FD77AB5A6C2920E7BD705E8DC61D6"
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace OfflineWorkflowSample
{
    partial class MapWithTools : 
        global::Windows.UI.Xaml.Controls.UserControl, 
        global::Windows.UI.Xaml.Markup.IComponentConnector,
        global::Windows.UI.Xaml.Markup.IComponentConnector2
    {
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks"," 0.0.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private static class XamlBindingSetters
        {
            public static void Set_Esri_ArcGISRuntime_UI_Controls_MapView_Map(global::Esri.ArcGISRuntime.UI.Controls.MapView obj, global::Esri.ArcGISRuntime.Mapping.Map value, string targetNullValue)
            {
                if (value == null && targetNullValue != null)
                {
                    value = global::Esri.ArcGISRuntime.CreateFromStringHelpers.CreateMapFromStringUrl(targetNullValue);
                }
                obj.Map = value;
            }
            public static void Set_Windows_UI_Xaml_Controls_ItemsControl_ItemsSource(global::Windows.UI.Xaml.Controls.ItemsControl obj, global::System.Object value, string targetNullValue)
            {
                if (value == null && targetNullValue != null)
                {
                    value = (global::System.Object) global::Windows.UI.Xaml.Markup.XamlBindingHelper.ConvertValue(typeof(global::System.Object), targetNullValue);
                }
                obj.ItemsSource = value;
            }
            public static void Set_Windows_UI_Xaml_Controls_TextBlock_Text(global::Windows.UI.Xaml.Controls.TextBlock obj, global::System.String value, string targetNullValue)
            {
                if (value == null && targetNullValue != null)
                {
                    value = targetNullValue;
                }
                obj.Text = value ?? global::System.String.Empty;
            }
            public static void Set_Esri_ArcGISRuntime_Toolkit_UI_Controls_Legend_GeoView(global::Esri.ArcGISRuntime.Toolkit.UI.Controls.Legend obj, global::Esri.ArcGISRuntime.UI.Controls.GeoView value, string targetNullValue)
            {
                if (value == null && targetNullValue != null)
                {
                    value = (global::Esri.ArcGISRuntime.UI.Controls.GeoView) global::Windows.UI.Xaml.Markup.XamlBindingHelper.ConvertValue(typeof(global::Esri.ArcGISRuntime.UI.Controls.GeoView), targetNullValue);
                }
                obj.GeoView = value;
            }
            public static void Set_Esri_ArcGISRuntime_Toolkit_UI_Controls_Compass_GeoView(global::Esri.ArcGISRuntime.Toolkit.UI.Controls.Compass obj, global::Esri.ArcGISRuntime.UI.Controls.GeoView value, string targetNullValue)
            {
                if (value == null && targetNullValue != null)
                {
                    value = (global::Esri.ArcGISRuntime.UI.Controls.GeoView) global::Windows.UI.Xaml.Markup.XamlBindingHelper.ConvertValue(typeof(global::Esri.ArcGISRuntime.UI.Controls.GeoView), targetNullValue);
                }
                obj.GeoView = value;
            }
            public static void Set_Windows_UI_Xaml_Controls_Image_Source(global::Windows.UI.Xaml.Controls.Image obj, global::Windows.UI.Xaml.Media.ImageSource value, string targetNullValue)
            {
                if (value == null && targetNullValue != null)
                {
                    value = (global::Windows.UI.Xaml.Media.ImageSource) global::Windows.UI.Xaml.Markup.XamlBindingHelper.ConvertValue(typeof(global::Windows.UI.Xaml.Media.ImageSource), targetNullValue);
                }
                obj.Source = value;
            }
            public static void Set_Windows_UI_Xaml_Controls_Primitives_ButtonBase_Command(global::Windows.UI.Xaml.Controls.Primitives.ButtonBase obj, global::System.Windows.Input.ICommand value, string targetNullValue)
            {
                if (value == null && targetNullValue != null)
                {
                    value = (global::System.Windows.Input.ICommand) global::Windows.UI.Xaml.Markup.XamlBindingHelper.ConvertValue(typeof(global::System.Windows.Input.ICommand), targetNullValue);
                }
                obj.Command = value;
            }
            public static void Set_OfflineWorkflowsSample_Infrastructure_ViewServices_GeoViewServiceBase_1_Esri_ArcGISRuntime_UI_Controls_MapView__ViewService(global::Windows.UI.Xaml.DependencyObject obj, global::OfflineWorkflowsSample.Infrastructure.ViewServices.GeoViewServiceBase<global::Esri.ArcGISRuntime.UI.Controls.MapView> value, string targetNullValue)
            {
                if (value == null && targetNullValue != null)
                {
                    value = (global::OfflineWorkflowsSample.Infrastructure.ViewServices.GeoViewServiceBase<global::Esri.ArcGISRuntime.UI.Controls.MapView>) global::Windows.UI.Xaml.Markup.XamlBindingHelper.ConvertValue(typeof(global::OfflineWorkflowsSample.Infrastructure.ViewServices.GeoViewServiceBase<global::Esri.ArcGISRuntime.UI.Controls.MapView>), targetNullValue);
                }
                global::OfflineWorkflowsSample.Infrastructure.ViewServices.GeoViewServiceBase<global::Esri.ArcGISRuntime.UI.Controls.MapView>.SetViewService(obj, value);
            }
        };

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks"," 0.0.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private class MapWithTools_obj3_Bindings :
            global::Windows.UI.Xaml.IDataTemplateExtension,
            global::Windows.UI.Xaml.Markup.IDataTemplateComponent,
            global::Windows.UI.Xaml.Markup.IXamlBindScopeDiagnostics,
            global::Windows.UI.Xaml.Markup.IComponentConnector,
            IMapWithTools_Bindings
        {
            private global::Esri.ArcGISRuntime.Mapping.Layer dataRoot;
            private bool initialized = false;
            private const int NOT_PHASED = (1 << 31);
            private const int DATA_CHANGED = (1 << 30);
            private bool removedDataContextHandler = false;

            // Fields for each control that has bindings.
            private global::System.WeakReference obj3;

            // Static fields for each binding's enabled/disabled state
            private static bool isobj3TextDisabled = false;

            public MapWithTools_obj3_Bindings()
            {
            }

            public void Disable(int lineNumber, int columnNumber)
            {
                if (lineNumber == 12 && columnNumber == 24)
                {
                    isobj3TextDisabled = true;
                }
            }

            // IComponentConnector

            public void Connect(int connectionId, global::System.Object target)
            {
                switch(connectionId)
                {
                    case 3: // Views\Controls\MapWithTools.xaml line 12
                        this.obj3 = new global::System.WeakReference((global::Windows.UI.Xaml.Controls.TextBlock)target);
                        break;
                    default:
                        break;
                }
            }

            public void DataContextChangedHandler(global::Windows.UI.Xaml.FrameworkElement sender, global::Windows.UI.Xaml.DataContextChangedEventArgs args)
            {
                 if (this.SetDataRoot(args.NewValue))
                 {
                    this.Update();
                 }
            }

            // IDataTemplateExtension

            public bool ProcessBinding(uint phase)
            {
                throw new global::System.NotImplementedException();
            }

            public int ProcessBindings(global::Windows.UI.Xaml.Controls.ContainerContentChangingEventArgs args)
            {
                int nextPhase = -1;
                ProcessBindings(args.Item, args.ItemIndex, (int)args.Phase, out nextPhase);
                return nextPhase;
            }

            public void ResetTemplate()
            {
                Recycle();
            }

            // IDataTemplateComponent

            public void ProcessBindings(global::System.Object item, int itemIndex, int phase, out int nextPhase)
            {
                nextPhase = -1;
                switch(phase)
                {
                    case 0:
                        nextPhase = -1;
                        this.SetDataRoot(item);
                        if (!removedDataContextHandler)
                        {
                            removedDataContextHandler = true;
                            (this.obj3.Target as global::Windows.UI.Xaml.Controls.TextBlock).DataContextChanged -= this.DataContextChangedHandler;
                        }
                        this.initialized = true;
                        break;
                }
                this.Update_((global::Esri.ArcGISRuntime.Mapping.Layer) item, 1 << phase);
            }

            public void Recycle()
            {
            }

            // IMapWithTools_Bindings

            public void Initialize()
            {
                if (!this.initialized)
                {
                    this.Update();
                }
            }
            
            public void Update()
            {
                this.Update_(this.dataRoot, NOT_PHASED);
                this.initialized = true;
            }

            public void StopTracking()
            {
            }

            public void DisconnectUnloadedObject(int connectionId)
            {
                throw new global::System.ArgumentException("No unloadable elements to disconnect.");
            }

            public bool SetDataRoot(global::System.Object newDataRoot)
            {
                if (newDataRoot != null)
                {
                    this.dataRoot = (global::Esri.ArcGISRuntime.Mapping.Layer)newDataRoot;
                    return true;
                }
                return false;
            }

            // Update methods for each path node used in binding steps.
            private void Update_(global::Esri.ArcGISRuntime.Mapping.Layer obj, int phase)
            {
                if (obj != null)
                {
                    if ((phase & (NOT_PHASED | (1 << 0))) != 0)
                    {
                        this.Update_Name(obj.Name, phase);
                    }
                }
            }
            private void Update_Name(global::System.String obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED )) != 0)
                {
                    // Views\Controls\MapWithTools.xaml line 12
                    if (!isobj3TextDisabled)
                    {
                        if ((this.obj3.Target as global::Windows.UI.Xaml.Controls.TextBlock) != null)
                        {
                            XamlBindingSetters.Set_Windows_UI_Xaml_Controls_TextBlock_Text((this.obj3.Target as global::Windows.UI.Xaml.Controls.TextBlock), obj, null);
                        }
                    }
                }
            }
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks"," 0.0.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private class MapWithTools_obj21_Bindings :
            global::Windows.UI.Xaml.IDataTemplateExtension,
            global::Windows.UI.Xaml.Markup.IDataTemplateComponent,
            global::Windows.UI.Xaml.Markup.IXamlBindScopeDiagnostics,
            global::Windows.UI.Xaml.Markup.IComponentConnector,
            IMapWithTools_Bindings
        {
            private global::Esri.ArcGISRuntime.Mapping.Basemap dataRoot;
            private bool initialized = false;
            private const int NOT_PHASED = (1 << 31);
            private const int DATA_CHANGED = (1 << 30);
            private bool removedDataContextHandler = false;

            // Fields for each control that has bindings.
            private global::System.WeakReference obj21;
            private global::Windows.UI.Xaml.Controls.TextBlock obj22;

            // Static fields for each binding's enabled/disabled state
            private static bool isobj22TextDisabled = false;

            public MapWithTools_obj21_Bindings()
            {
            }

            public void Disable(int lineNumber, int columnNumber)
            {
                if (lineNumber == 86 && columnNumber == 57)
                {
                    isobj22TextDisabled = true;
                }
            }

            // IComponentConnector

            public void Connect(int connectionId, global::System.Object target)
            {
                switch(connectionId)
                {
                    case 21: // Views\Controls\MapWithTools.xaml line 68
                        this.obj21 = new global::System.WeakReference((global::Windows.UI.Xaml.Controls.Grid)target);
                        break;
                    case 22: // Views\Controls\MapWithTools.xaml line 83
                        this.obj22 = (global::Windows.UI.Xaml.Controls.TextBlock)target;
                        break;
                    default:
                        break;
                }
            }

            public void DataContextChangedHandler(global::Windows.UI.Xaml.FrameworkElement sender, global::Windows.UI.Xaml.DataContextChangedEventArgs args)
            {
                 if (this.SetDataRoot(args.NewValue))
                 {
                    this.Update();
                 }
            }

            // IDataTemplateExtension

            public bool ProcessBinding(uint phase)
            {
                throw new global::System.NotImplementedException();
            }

            public int ProcessBindings(global::Windows.UI.Xaml.Controls.ContainerContentChangingEventArgs args)
            {
                int nextPhase = -1;
                ProcessBindings(args.Item, args.ItemIndex, (int)args.Phase, out nextPhase);
                return nextPhase;
            }

            public void ResetTemplate()
            {
                Recycle();
            }

            // IDataTemplateComponent

            public void ProcessBindings(global::System.Object item, int itemIndex, int phase, out int nextPhase)
            {
                nextPhase = -1;
                switch(phase)
                {
                    case 0:
                        nextPhase = -1;
                        this.SetDataRoot(item);
                        if (!removedDataContextHandler)
                        {
                            removedDataContextHandler = true;
                            (this.obj21.Target as global::Windows.UI.Xaml.Controls.Grid).DataContextChanged -= this.DataContextChangedHandler;
                        }
                        this.initialized = true;
                        break;
                }
                this.Update_((global::Esri.ArcGISRuntime.Mapping.Basemap) item, 1 << phase);
            }

            public void Recycle()
            {
            }

            // IMapWithTools_Bindings

            public void Initialize()
            {
                if (!this.initialized)
                {
                    this.Update();
                }
            }
            
            public void Update()
            {
                this.Update_(this.dataRoot, NOT_PHASED);
                this.initialized = true;
            }

            public void StopTracking()
            {
            }

            public void DisconnectUnloadedObject(int connectionId)
            {
                throw new global::System.ArgumentException("No unloadable elements to disconnect.");
            }

            public bool SetDataRoot(global::System.Object newDataRoot)
            {
                if (newDataRoot != null)
                {
                    this.dataRoot = (global::Esri.ArcGISRuntime.Mapping.Basemap)newDataRoot;
                    return true;
                }
                return false;
            }

            // Update methods for each path node used in binding steps.
            private void Update_(global::Esri.ArcGISRuntime.Mapping.Basemap obj, int phase)
            {
                if (obj != null)
                {
                    if ((phase & (NOT_PHASED | (1 << 0))) != 0)
                    {
                        this.Update_Name(obj.Name, phase);
                    }
                }
            }
            private void Update_Name(global::System.String obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED )) != 0)
                {
                    // Views\Controls\MapWithTools.xaml line 83
                    if (!isobj22TextDisabled)
                    {
                        XamlBindingSetters.Set_Windows_UI_Xaml_Controls_TextBlock_Text(this.obj22, obj, null);
                    }
                }
            }
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks"," 0.0.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private class MapWithTools_obj1_Bindings :
            global::Windows.UI.Xaml.Markup.IDataTemplateComponent,
            global::Windows.UI.Xaml.Markup.IXamlBindScopeDiagnostics,
            global::Windows.UI.Xaml.Markup.IComponentConnector,
            IMapWithTools_Bindings
        {
            private global::OfflineWorkflowSample.MapWithTools dataRoot;
            private bool initialized = false;
            private const int NOT_PHASED = (1 << 31);
            private const int DATA_CHANGED = (1 << 30);

            // Fields for each control that has bindings.
            private global::Windows.UI.Xaml.Controls.ListView obj6;
            private global::Windows.UI.Xaml.Controls.TextBlock obj7;
            private global::Esri.ArcGISRuntime.Toolkit.UI.Controls.Legend obj8;
            private global::Windows.UI.Xaml.Controls.TextBlock obj9;
            private global::Windows.UI.Xaml.Controls.Image obj10;
            private global::Windows.UI.Xaml.Controls.TextBlock obj11;
            private global::Windows.UI.Xaml.Controls.Button obj12;
            private global::Esri.ArcGISRuntime.UI.Controls.MapView obj13;
            private global::Esri.ArcGISRuntime.Toolkit.UI.Controls.Compass obj14;
            private global::Windows.UI.Xaml.Controls.AppBarButton obj16;
            private global::Windows.UI.Xaml.Controls.AppBarButton obj17;
            private global::Windows.UI.Xaml.Controls.AppBarButton obj18;
            private global::Windows.UI.Xaml.Controls.GridView obj19;

            // Static fields for each binding's enabled/disabled state
            private static bool isobj6ItemsSourceDisabled = false;
            private static bool isobj7TextDisabled = false;
            private static bool isobj8GeoViewDisabled = false;
            private static bool isobj9TextDisabled = false;
            private static bool isobj10SourceDisabled = false;
            private static bool isobj11TextDisabled = false;
            private static bool isobj12CommandDisabled = false;
            private static bool isobj13ViewServiceDisabled = false;
            private static bool isobj13MapDisabled = false;
            private static bool isobj14GeoViewDisabled = false;
            private static bool isobj16CommandDisabled = false;
            private static bool isobj17CommandDisabled = false;
            private static bool isobj18CommandDisabled = false;
            private static bool isobj19ItemsSourceDisabled = false;

            private MapWithTools_obj1_BindingsTracking bindingsTracking;

            public MapWithTools_obj1_Bindings()
            {
                this.bindingsTracking = new MapWithTools_obj1_BindingsTracking(this);
            }

            public void Disable(int lineNumber, int columnNumber)
            {
                if (lineNumber == 130 && columnNumber == 33)
                {
                    isobj6ItemsSourceDisabled = true;
                }
                else if (lineNumber == 133 && columnNumber == 60)
                {
                    isobj7TextDisabled = true;
                }
                else if (lineNumber == 122 && columnNumber == 39)
                {
                    isobj8GeoViewDisabled = true;
                }
                else if (lineNumber == 108 && columnNumber == 88)
                {
                    isobj9TextDisabled = true;
                }
                else if (lineNumber == 109 && columnNumber == 47)
                {
                    isobj10SourceDisabled = true;
                }
                else if (lineNumber == 112 && columnNumber == 33)
                {
                    isobj11TextDisabled = true;
                }
                else if (lineNumber == 116 && columnNumber == 33)
                {
                    isobj12CommandDisabled = true;
                }
                else if (lineNumber == 23 && columnNumber == 17)
                {
                    isobj13ViewServiceDisabled = true;
                }
                else if (lineNumber == 24 && columnNumber == 17)
                {
                    isobj13MapDisabled = true;
                }
                else if (lineNumber == 32 && columnNumber == 17)
                {
                    isobj14GeoViewDisabled = true;
                }
                else if (lineNumber == 43 && columnNumber == 25)
                {
                    isobj16CommandDisabled = true;
                }
                else if (lineNumber == 49 && columnNumber == 25)
                {
                    isobj17CommandDisabled = true;
                }
                else if (lineNumber == 55 && columnNumber == 25)
                {
                    isobj18CommandDisabled = true;
                }
                else if (lineNumber == 64 && columnNumber == 37)
                {
                    isobj19ItemsSourceDisabled = true;
                }
            }

            // IComponentConnector

            public void Connect(int connectionId, global::System.Object target)
            {
                switch(connectionId)
                {
                    case 6: // Views\Controls\MapWithTools.xaml line 128
                        this.obj6 = (global::Windows.UI.Xaml.Controls.ListView)target;
                        break;
                    case 7: // Views\Controls\MapWithTools.xaml line 133
                        this.obj7 = (global::Windows.UI.Xaml.Controls.TextBlock)target;
                        break;
                    case 8: // Views\Controls\MapWithTools.xaml line 122
                        this.obj8 = (global::Esri.ArcGISRuntime.Toolkit.UI.Controls.Legend)target;
                        break;
                    case 9: // Views\Controls\MapWithTools.xaml line 108
                        this.obj9 = (global::Windows.UI.Xaml.Controls.TextBlock)target;
                        break;
                    case 10: // Views\Controls\MapWithTools.xaml line 109
                        this.obj10 = (global::Windows.UI.Xaml.Controls.Image)target;
                        break;
                    case 11: // Views\Controls\MapWithTools.xaml line 110
                        this.obj11 = (global::Windows.UI.Xaml.Controls.TextBlock)target;
                        break;
                    case 12: // Views\Controls\MapWithTools.xaml line 114
                        this.obj12 = (global::Windows.UI.Xaml.Controls.Button)target;
                        break;
                    case 13: // Views\Controls\MapWithTools.xaml line 21
                        this.obj13 = (global::Esri.ArcGISRuntime.UI.Controls.MapView)target;
                        break;
                    case 14: // Views\Controls\MapWithTools.xaml line 25
                        this.obj14 = (global::Esri.ArcGISRuntime.Toolkit.UI.Controls.Compass)target;
                        break;
                    case 16: // Views\Controls\MapWithTools.xaml line 41
                        this.obj16 = (global::Windows.UI.Xaml.Controls.AppBarButton)target;
                        break;
                    case 17: // Views\Controls\MapWithTools.xaml line 47
                        this.obj17 = (global::Windows.UI.Xaml.Controls.AppBarButton)target;
                        break;
                    case 18: // Views\Controls\MapWithTools.xaml line 53
                        this.obj18 = (global::Windows.UI.Xaml.Controls.AppBarButton)target;
                        break;
                    case 19: // Views\Controls\MapWithTools.xaml line 62
                        this.obj19 = (global::Windows.UI.Xaml.Controls.GridView)target;
                        break;
                    default:
                        break;
                }
            }

            // IDataTemplateComponent

            public void ProcessBindings(global::System.Object item, int itemIndex, int phase, out int nextPhase)
            {
                nextPhase = -1;
            }

            public void Recycle()
            {
                return;
            }

            // IMapWithTools_Bindings

            public void Initialize()
            {
                if (!this.initialized)
                {
                    this.Update();
                }
            }
            
            public void Update()
            {
                this.Update_(this.dataRoot, NOT_PHASED);
                this.initialized = true;
            }

            public void StopTracking()
            {
                this.bindingsTracking.ReleaseAllListeners();
                this.initialized = false;
            }

            public void DisconnectUnloadedObject(int connectionId)
            {
                throw new global::System.ArgumentException("No unloadable elements to disconnect.");
            }

            public bool SetDataRoot(global::System.Object newDataRoot)
            {
                this.bindingsTracking.ReleaseAllListeners();
                if (newDataRoot != null)
                {
                    this.dataRoot = (global::OfflineWorkflowSample.MapWithTools)newDataRoot;
                    return true;
                }
                return false;
            }

            public void Loading(global::Windows.UI.Xaml.FrameworkElement src, object data)
            {
                this.Initialize();
            }

            // Update methods for each path node used in binding steps.
            private void Update_(global::OfflineWorkflowSample.MapWithTools obj, int phase)
            {
                this.bindingsTracking.UpdateChildListeners_(obj);
                if (obj != null)
                {
                    if ((phase & (NOT_PHASED | DATA_CHANGED | (1 << 0))) != 0)
                    {
                        this.Update_Map(obj.Map, phase);
                        this.Update_MyMapView(obj.MyMapView, phase);
                        this.Update_Item(obj.Item, phase);
                        this.Update_ViewModel(obj.ViewModel, phase);
                    }
                }
            }
            private void Update_Map(global::Esri.ArcGISRuntime.Mapping.Map obj, int phase)
            {
                this.bindingsTracking.UpdateChildListeners_Map(obj);
                if (obj != null)
                {
                    if ((phase & (NOT_PHASED | DATA_CHANGED | (1 << 0))) != 0)
                    {
                        this.Update_Map_OperationalLayers(obj.OperationalLayers, phase);
                        this.Update_Map_Basemap(obj.Basemap, phase);
                    }
                }
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // Views\Controls\MapWithTools.xaml line 21
                    if (!isobj13MapDisabled)
                    {
                        XamlBindingSetters.Set_Esri_ArcGISRuntime_UI_Controls_MapView_Map(this.obj13, obj, null);
                    }
                }
            }
            private void Update_Map_OperationalLayers(global::Esri.ArcGISRuntime.Mapping.LayerCollection obj, int phase)
            {
                this.bindingsTracking.UpdateChildListeners_Map_OperationalLayers(obj);
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // Views\Controls\MapWithTools.xaml line 128
                    if (!isobj6ItemsSourceDisabled)
                    {
                        XamlBindingSetters.Set_Windows_UI_Xaml_Controls_ItemsControl_ItemsSource(this.obj6, obj, null);
                    }
                }
            }
            private void Update_Map_Basemap(global::Esri.ArcGISRuntime.Mapping.Basemap obj, int phase)
            {
                this.bindingsTracking.UpdateChildListeners_Map_Basemap(obj);
                if (obj != null)
                {
                    if ((phase & (NOT_PHASED | DATA_CHANGED | (1 << 0))) != 0)
                    {
                        this.Update_Map_Basemap_Name(obj.Name, phase);
                    }
                }
            }
            private void Update_Map_Basemap_Name(global::System.String obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // Views\Controls\MapWithTools.xaml line 133
                    if (!isobj7TextDisabled)
                    {
                        XamlBindingSetters.Set_Windows_UI_Xaml_Controls_TextBlock_Text(this.obj7, obj, null);
                    }
                }
            }
            private void Update_MyMapView(global::Esri.ArcGISRuntime.UI.Controls.MapView obj, int phase)
            {
                this.bindingsTracking.UpdateChildListeners_MyMapView(obj);
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // Views\Controls\MapWithTools.xaml line 25
                    if (!isobj14GeoViewDisabled)
                    {
                        XamlBindingSetters.Set_Esri_ArcGISRuntime_Toolkit_UI_Controls_Compass_GeoView(this.obj14, obj, null);
                    }
                }
                if ((phase & ((1 << 0) | NOT_PHASED )) != 0)
                {
                    // Views\Controls\MapWithTools.xaml line 122
                    if (!isobj8GeoViewDisabled)
                    {
                        XamlBindingSetters.Set_Esri_ArcGISRuntime_Toolkit_UI_Controls_Legend_GeoView(this.obj8, obj, null);
                    }
                }
            }
            private void Update_Item(global::OfflineWorkflowSample.ViewModels.PortalItemViewModel obj, int phase)
            {
                this.bindingsTracking.UpdateChildListeners_Item(obj);
                if (obj != null)
                {
                    if ((phase & (NOT_PHASED | DATA_CHANGED | (1 << 0))) != 0)
                    {
                        this.Update_Item_DisplayName(obj.DisplayName, phase);
                        this.Update_Item_Thumbnail(obj.Thumbnail, phase);
                        this.Update_Item_Item(obj.Item, phase);
                    }
                }
            }
            private void Update_Item_DisplayName(global::System.String obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // Views\Controls\MapWithTools.xaml line 108
                    if (!isobj9TextDisabled)
                    {
                        XamlBindingSetters.Set_Windows_UI_Xaml_Controls_TextBlock_Text(this.obj9, obj, null);
                    }
                }
            }
            private void Update_Item_Thumbnail(global::Windows.UI.Xaml.Media.ImageSource obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // Views\Controls\MapWithTools.xaml line 109
                    if (!isobj10SourceDisabled)
                    {
                        XamlBindingSetters.Set_Windows_UI_Xaml_Controls_Image_Source(this.obj10, obj, null);
                    }
                }
            }
            private void Update_Item_Item(global::Esri.ArcGISRuntime.Portal.Item obj, int phase)
            {
                this.bindingsTracking.UpdateChildListeners_Item_Item(obj);
                if (obj != null)
                {
                    if ((phase & (NOT_PHASED | DATA_CHANGED | (1 << 0))) != 0)
                    {
                        this.Update_Item_Item_Description(obj.Description, phase);
                    }
                }
            }
            private void Update_Item_Item_Description(global::System.String obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // Views\Controls\MapWithTools.xaml line 110
                    if (!isobj11TextDisabled)
                    {
                        XamlBindingSetters.Set_Windows_UI_Xaml_Controls_TextBlock_Text(this.obj11, obj, null);
                    }
                }
            }
            private void Update_ViewModel(global::OfflineWorkflowsSample.MainViewModel obj, int phase)
            {
                this.bindingsTracking.UpdateChildListeners_ViewModel(obj);
                if (obj != null)
                {
                    if ((phase & (NOT_PHASED | (1 << 0))) != 0)
                    {
                        this.Update_ViewModel_OpenItemInAgolCommand(obj.OpenItemInAgolCommand, phase);
                    }
                    if ((phase & (NOT_PHASED | DATA_CHANGED | (1 << 0))) != 0)
                    {
                        this.Update_ViewModel_MapViewService(obj.MapViewService, phase);
                    }
                    if ((phase & (NOT_PHASED | (1 << 0))) != 0)
                    {
                        this.Update_ViewModel_ZoomInCommand(obj.ZoomInCommand, phase);
                        this.Update_ViewModel_ResetViewPointCommand(obj.ResetViewPointCommand, phase);
                        this.Update_ViewModel_ZoomOutCommand(obj.ZoomOutCommand, phase);
                        this.Update_ViewModel_PortalViewModel(obj.PortalViewModel, phase);
                    }
                }
            }
            private void Update_ViewModel_OpenItemInAgolCommand(global::System.Windows.Input.ICommand obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED )) != 0)
                {
                    // Views\Controls\MapWithTools.xaml line 114
                    if (!isobj12CommandDisabled)
                    {
                        XamlBindingSetters.Set_Windows_UI_Xaml_Controls_Primitives_ButtonBase_Command(this.obj12, obj, null);
                    }
                }
            }
            private void Update_ViewModel_MapViewService(global::OfflineWorkflowsSample.Infrastructure.ViewServices.MapViewService obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // Views\Controls\MapWithTools.xaml line 21
                    if (!isobj13ViewServiceDisabled)
                    {
                        XamlBindingSetters.Set_OfflineWorkflowsSample_Infrastructure_ViewServices_GeoViewServiceBase_1_Esri_ArcGISRuntime_UI_Controls_MapView__ViewService(this.obj13, obj, null);
                    }
                }
            }
            private void Update_ViewModel_ZoomInCommand(global::System.Windows.Input.ICommand obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED )) != 0)
                {
                    // Views\Controls\MapWithTools.xaml line 41
                    if (!isobj16CommandDisabled)
                    {
                        XamlBindingSetters.Set_Windows_UI_Xaml_Controls_Primitives_ButtonBase_Command(this.obj16, obj, null);
                    }
                }
            }
            private void Update_ViewModel_ResetViewPointCommand(global::System.Windows.Input.ICommand obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED )) != 0)
                {
                    // Views\Controls\MapWithTools.xaml line 47
                    if (!isobj17CommandDisabled)
                    {
                        XamlBindingSetters.Set_Windows_UI_Xaml_Controls_Primitives_ButtonBase_Command(this.obj17, obj, null);
                    }
                }
            }
            private void Update_ViewModel_ZoomOutCommand(global::System.Windows.Input.ICommand obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED )) != 0)
                {
                    // Views\Controls\MapWithTools.xaml line 53
                    if (!isobj18CommandDisabled)
                    {
                        XamlBindingSetters.Set_Windows_UI_Xaml_Controls_Primitives_ButtonBase_Command(this.obj18, obj, null);
                    }
                }
            }
            private void Update_ViewModel_PortalViewModel(global::OfflineWorkflowSample.PortalViewModel obj, int phase)
            {
                if (obj != null)
                {
                    if ((phase & (NOT_PHASED | (1 << 0))) != 0)
                    {
                        this.Update_ViewModel_PortalViewModel_OrgBasemaps(obj.OrgBasemaps, phase);
                    }
                }
            }
            private void Update_ViewModel_PortalViewModel_OrgBasemaps(global::System.Collections.Generic.List<global::Esri.ArcGISRuntime.Mapping.Basemap> obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED )) != 0)
                {
                    // Views\Controls\MapWithTools.xaml line 62
                    if (!isobj19ItemsSourceDisabled)
                    {
                        XamlBindingSetters.Set_Windows_UI_Xaml_Controls_ItemsControl_ItemsSource(this.obj19, obj, null);
                    }
                }
            }

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks"," 0.0.0.0")]
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private class MapWithTools_obj1_BindingsTracking
            {
                private global::System.WeakReference<MapWithTools_obj1_Bindings> weakRefToBindingObj; 

                public MapWithTools_obj1_BindingsTracking(MapWithTools_obj1_Bindings obj)
                {
                    weakRefToBindingObj = new global::System.WeakReference<MapWithTools_obj1_Bindings>(obj);
                }

                public MapWithTools_obj1_Bindings TryGetBindingObject()
                {
                    MapWithTools_obj1_Bindings bindingObject = null;
                    if (weakRefToBindingObj != null)
                    {
                        weakRefToBindingObj.TryGetTarget(out bindingObject);
                        if (bindingObject == null)
                        {
                            weakRefToBindingObj = null;
                            ReleaseAllListeners();
                        }
                    }
                    return bindingObject;
                }

                public void ReleaseAllListeners()
                {
                    UpdateChildListeners_(null);
                    UpdateChildListeners_Map(null);
                    UpdateChildListeners_Map_OperationalLayers(null);
                    UpdateChildListeners_Map_Basemap(null);
                    UpdateChildListeners_MyMapView(null);
                    UpdateChildListeners_Item(null);
                    UpdateChildListeners_Item_Item(null);
                    UpdateChildListeners_ViewModel(null);
                }

                public void DependencyPropertyChanged_Map(global::Windows.UI.Xaml.DependencyObject sender, global::Windows.UI.Xaml.DependencyProperty prop)
                {
                    MapWithTools_obj1_Bindings bindings = TryGetBindingObject();
                    if (bindings != null)
                    {
                        global::OfflineWorkflowSample.MapWithTools obj = sender as global::OfflineWorkflowSample.MapWithTools;
                        if (obj != null)
                        {
                            bindings.Update_Map(obj.Map, DATA_CHANGED);
                        }
                    }
                }
                public void DependencyPropertyChanged_Item(global::Windows.UI.Xaml.DependencyObject sender, global::Windows.UI.Xaml.DependencyProperty prop)
                {
                    MapWithTools_obj1_Bindings bindings = TryGetBindingObject();
                    if (bindings != null)
                    {
                        global::OfflineWorkflowSample.MapWithTools obj = sender as global::OfflineWorkflowSample.MapWithTools;
                        if (obj != null)
                        {
                            bindings.Update_Item(obj.Item, DATA_CHANGED);
                        }
                    }
                }
                private long tokenDPC_Map = 0;
                private long tokenDPC_Item = 0;
                public void UpdateChildListeners_(global::OfflineWorkflowSample.MapWithTools obj)
                {
                    MapWithTools_obj1_Bindings bindings = TryGetBindingObject();
                    if (bindings != null)
                    {
                        if (bindings.dataRoot != null)
                        {
                            bindings.dataRoot.UnregisterPropertyChangedCallback(global::OfflineWorkflowSample.MapWithTools.MapProperty, tokenDPC_Map);
                            bindings.dataRoot.UnregisterPropertyChangedCallback(global::OfflineWorkflowSample.MapWithTools.ItemProperty, tokenDPC_Item);
                        }
                        if (obj != null)
                        {
                            bindings.dataRoot = obj;
                            tokenDPC_Map = obj.RegisterPropertyChangedCallback(global::OfflineWorkflowSample.MapWithTools.MapProperty, DependencyPropertyChanged_Map);
                            tokenDPC_Item = obj.RegisterPropertyChangedCallback(global::OfflineWorkflowSample.MapWithTools.ItemProperty, DependencyPropertyChanged_Item);
                        }
                    }
                }
                public void PropertyChanged_Map(object sender, global::System.ComponentModel.PropertyChangedEventArgs e)
                {
                    MapWithTools_obj1_Bindings bindings = TryGetBindingObject();
                    if (bindings != null)
                    {
                        string propName = e.PropertyName;
                        global::Esri.ArcGISRuntime.Mapping.Map obj = sender as global::Esri.ArcGISRuntime.Mapping.Map;
                        if (global::System.String.IsNullOrEmpty(propName))
                        {
                            if (obj != null)
                            {
                                bindings.Update_Map_OperationalLayers(obj.OperationalLayers, DATA_CHANGED);
                                bindings.Update_Map_Basemap(obj.Basemap, DATA_CHANGED);
                            }
                        }
                        else
                        {
                            switch (propName)
                            {
                                case "OperationalLayers":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_Map_OperationalLayers(obj.OperationalLayers, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "Basemap":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_Map_Basemap(obj.Basemap, DATA_CHANGED);
                                    }
                                    break;
                                }
                                default:
                                    break;
                            }
                        }
                    }
                }
                private global::Esri.ArcGISRuntime.Mapping.Map cache_Map = null;
                public void UpdateChildListeners_Map(global::Esri.ArcGISRuntime.Mapping.Map obj)
                {
                    if (obj != cache_Map)
                    {
                        if (cache_Map != null)
                        {
                            ((global::System.ComponentModel.INotifyPropertyChanged)cache_Map).PropertyChanged -= PropertyChanged_Map;
                            cache_Map = null;
                        }
                        if (obj != null)
                        {
                            cache_Map = obj;
                            ((global::System.ComponentModel.INotifyPropertyChanged)obj).PropertyChanged += PropertyChanged_Map;
                        }
                    }
                }
                public void PropertyChanged_Map_OperationalLayers(object sender, global::System.ComponentModel.PropertyChangedEventArgs e)
                {
                    MapWithTools_obj1_Bindings bindings = TryGetBindingObject();
                    if (bindings != null)
                    {
                        string propName = e.PropertyName;
                        global::Esri.ArcGISRuntime.Mapping.LayerCollection obj = sender as global::Esri.ArcGISRuntime.Mapping.LayerCollection;
                        if (global::System.String.IsNullOrEmpty(propName))
                        {
                        }
                        else
                        {
                            switch (propName)
                            {
                                default:
                                    break;
                            }
                        }
                    }
                }
                public void CollectionChanged_Map_OperationalLayers(object sender, global::System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
                {
                    MapWithTools_obj1_Bindings bindings = TryGetBindingObject();
                    if (bindings != null)
                    {
                        global::Esri.ArcGISRuntime.Mapping.LayerCollection obj = sender as global::Esri.ArcGISRuntime.Mapping.LayerCollection;
                    }
                }
                private global::Esri.ArcGISRuntime.Mapping.LayerCollection cache_Map_OperationalLayers = null;
                public void UpdateChildListeners_Map_OperationalLayers(global::Esri.ArcGISRuntime.Mapping.LayerCollection obj)
                {
                    if (obj != cache_Map_OperationalLayers)
                    {
                        if (cache_Map_OperationalLayers != null)
                        {
                            ((global::System.ComponentModel.INotifyPropertyChanged)cache_Map_OperationalLayers).PropertyChanged -= PropertyChanged_Map_OperationalLayers;
                            ((global::System.Collections.Specialized.INotifyCollectionChanged)cache_Map_OperationalLayers).CollectionChanged -= CollectionChanged_Map_OperationalLayers;
                            cache_Map_OperationalLayers = null;
                        }
                        if (obj != null)
                        {
                            cache_Map_OperationalLayers = obj;
                            ((global::System.ComponentModel.INotifyPropertyChanged)obj).PropertyChanged += PropertyChanged_Map_OperationalLayers;
                            ((global::System.Collections.Specialized.INotifyCollectionChanged)obj).CollectionChanged += CollectionChanged_Map_OperationalLayers;
                        }
                    }
                }
                public void PropertyChanged_Map_Basemap(object sender, global::System.ComponentModel.PropertyChangedEventArgs e)
                {
                    MapWithTools_obj1_Bindings bindings = TryGetBindingObject();
                    if (bindings != null)
                    {
                        string propName = e.PropertyName;
                        global::Esri.ArcGISRuntime.Mapping.Basemap obj = sender as global::Esri.ArcGISRuntime.Mapping.Basemap;
                        if (global::System.String.IsNullOrEmpty(propName))
                        {
                            if (obj != null)
                            {
                                bindings.Update_Map_Basemap_Name(obj.Name, DATA_CHANGED);
                            }
                        }
                        else
                        {
                            switch (propName)
                            {
                                case "Name":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_Map_Basemap_Name(obj.Name, DATA_CHANGED);
                                    }
                                    break;
                                }
                                default:
                                    break;
                            }
                        }
                    }
                }
                private global::Esri.ArcGISRuntime.Mapping.Basemap cache_Map_Basemap = null;
                public void UpdateChildListeners_Map_Basemap(global::Esri.ArcGISRuntime.Mapping.Basemap obj)
                {
                    if (obj != cache_Map_Basemap)
                    {
                        if (cache_Map_Basemap != null)
                        {
                            ((global::System.ComponentModel.INotifyPropertyChanged)cache_Map_Basemap).PropertyChanged -= PropertyChanged_Map_Basemap;
                            cache_Map_Basemap = null;
                        }
                        if (obj != null)
                        {
                            cache_Map_Basemap = obj;
                            ((global::System.ComponentModel.INotifyPropertyChanged)obj).PropertyChanged += PropertyChanged_Map_Basemap;
                        }
                    }
                }
                public void PropertyChanged_MyMapView(object sender, global::System.ComponentModel.PropertyChangedEventArgs e)
                {
                    MapWithTools_obj1_Bindings bindings = TryGetBindingObject();
                    if (bindings != null)
                    {
                        string propName = e.PropertyName;
                        global::Esri.ArcGISRuntime.UI.Controls.MapView obj = sender as global::Esri.ArcGISRuntime.UI.Controls.MapView;
                        if (global::System.String.IsNullOrEmpty(propName))
                        {
                        }
                        else
                        {
                            switch (propName)
                            {
                                default:
                                    break;
                            }
                        }
                    }
                }
                private global::Esri.ArcGISRuntime.UI.Controls.MapView cache_MyMapView = null;
                public void UpdateChildListeners_MyMapView(global::Esri.ArcGISRuntime.UI.Controls.MapView obj)
                {
                    if (obj != cache_MyMapView)
                    {
                        if (cache_MyMapView != null)
                        {
                            ((global::System.ComponentModel.INotifyPropertyChanged)cache_MyMapView).PropertyChanged -= PropertyChanged_MyMapView;
                            cache_MyMapView = null;
                        }
                        if (obj != null)
                        {
                            cache_MyMapView = obj;
                            ((global::System.ComponentModel.INotifyPropertyChanged)obj).PropertyChanged += PropertyChanged_MyMapView;
                        }
                    }
                }
                public void PropertyChanged_Item(object sender, global::System.ComponentModel.PropertyChangedEventArgs e)
                {
                    MapWithTools_obj1_Bindings bindings = TryGetBindingObject();
                    if (bindings != null)
                    {
                        string propName = e.PropertyName;
                        global::OfflineWorkflowSample.ViewModels.PortalItemViewModel obj = sender as global::OfflineWorkflowSample.ViewModels.PortalItemViewModel;
                        if (global::System.String.IsNullOrEmpty(propName))
                        {
                            if (obj != null)
                            {
                                bindings.Update_Item_DisplayName(obj.DisplayName, DATA_CHANGED);
                                bindings.Update_Item_Thumbnail(obj.Thumbnail, DATA_CHANGED);
                                bindings.Update_Item_Item(obj.Item, DATA_CHANGED);
                            }
                        }
                        else
                        {
                            switch (propName)
                            {
                                case "DisplayName":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_Item_DisplayName(obj.DisplayName, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "Thumbnail":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_Item_Thumbnail(obj.Thumbnail, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "Item":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_Item_Item(obj.Item, DATA_CHANGED);
                                    }
                                    break;
                                }
                                default:
                                    break;
                            }
                        }
                    }
                }
                private global::OfflineWorkflowSample.ViewModels.PortalItemViewModel cache_Item = null;
                public void UpdateChildListeners_Item(global::OfflineWorkflowSample.ViewModels.PortalItemViewModel obj)
                {
                    if (obj != cache_Item)
                    {
                        if (cache_Item != null)
                        {
                            ((global::System.ComponentModel.INotifyPropertyChanged)cache_Item).PropertyChanged -= PropertyChanged_Item;
                            cache_Item = null;
                        }
                        if (obj != null)
                        {
                            cache_Item = obj;
                            ((global::System.ComponentModel.INotifyPropertyChanged)obj).PropertyChanged += PropertyChanged_Item;
                        }
                    }
                }
                public void PropertyChanged_Item_Item(object sender, global::System.ComponentModel.PropertyChangedEventArgs e)
                {
                    MapWithTools_obj1_Bindings bindings = TryGetBindingObject();
                    if (bindings != null)
                    {
                        string propName = e.PropertyName;
                        global::Esri.ArcGISRuntime.Portal.Item obj = sender as global::Esri.ArcGISRuntime.Portal.Item;
                        if (global::System.String.IsNullOrEmpty(propName))
                        {
                            if (obj != null)
                            {
                                bindings.Update_Item_Item_Description(obj.Description, DATA_CHANGED);
                            }
                        }
                        else
                        {
                            switch (propName)
                            {
                                case "Description":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_Item_Item_Description(obj.Description, DATA_CHANGED);
                                    }
                                    break;
                                }
                                default:
                                    break;
                            }
                        }
                    }
                }
                private global::Esri.ArcGISRuntime.Portal.Item cache_Item_Item = null;
                public void UpdateChildListeners_Item_Item(global::Esri.ArcGISRuntime.Portal.Item obj)
                {
                    if (obj != cache_Item_Item)
                    {
                        if (cache_Item_Item != null)
                        {
                            ((global::System.ComponentModel.INotifyPropertyChanged)cache_Item_Item).PropertyChanged -= PropertyChanged_Item_Item;
                            cache_Item_Item = null;
                        }
                        if (obj != null)
                        {
                            cache_Item_Item = obj;
                            ((global::System.ComponentModel.INotifyPropertyChanged)obj).PropertyChanged += PropertyChanged_Item_Item;
                        }
                    }
                }
                public void PropertyChanged_ViewModel(object sender, global::System.ComponentModel.PropertyChangedEventArgs e)
                {
                    MapWithTools_obj1_Bindings bindings = TryGetBindingObject();
                    if (bindings != null)
                    {
                        string propName = e.PropertyName;
                        global::OfflineWorkflowsSample.MainViewModel obj = sender as global::OfflineWorkflowsSample.MainViewModel;
                        if (global::System.String.IsNullOrEmpty(propName))
                        {
                            if (obj != null)
                            {
                                bindings.Update_ViewModel_MapViewService(obj.MapViewService, DATA_CHANGED);
                            }
                        }
                        else
                        {
                            switch (propName)
                            {
                                case "MapViewService":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_ViewModel_MapViewService(obj.MapViewService, DATA_CHANGED);
                                    }
                                    break;
                                }
                                default:
                                    break;
                            }
                        }
                    }
                }
                private global::OfflineWorkflowsSample.MainViewModel cache_ViewModel = null;
                public void UpdateChildListeners_ViewModel(global::OfflineWorkflowsSample.MainViewModel obj)
                {
                    if (obj != cache_ViewModel)
                    {
                        if (cache_ViewModel != null)
                        {
                            ((global::System.ComponentModel.INotifyPropertyChanged)cache_ViewModel).PropertyChanged -= PropertyChanged_ViewModel;
                            cache_ViewModel = null;
                        }
                        if (obj != null)
                        {
                            cache_ViewModel = obj;
                            ((global::System.ComponentModel.INotifyPropertyChanged)obj).PropertyChanged += PropertyChanged_ViewModel;
                        }
                    }
                }
            }
        }
        /// <summary>
        /// Connect()
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks"," 0.0.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public void Connect(int connectionId, object target)
        {
            switch(connectionId)
            {
            case 4: // Views\Controls\MapWithTools.xaml line 100
                {
                    this.BonusSidebar = (global::Windows.UI.Xaml.Controls.Grid)(target);
                }
                break;
            case 5: // Views\Controls\MapWithTools.xaml line 104
                {
                    this.OuterPivot = (global::Windows.UI.Xaml.Controls.Pivot)(target);
                }
                break;
            case 13: // Views\Controls\MapWithTools.xaml line 21
                {
                    this.MyMapView = (global::Esri.ArcGISRuntime.UI.Controls.MapView)(target);
                }
                break;
            case 15: // Views\Controls\MapWithTools.xaml line 35
                {
                    global::Windows.UI.Xaml.Controls.AppBarButton element15 = (global::Windows.UI.Xaml.Controls.AppBarButton)(target);
                    ((global::Windows.UI.Xaml.Controls.AppBarButton)element15).Click += this.MenuButtonClicked;
                }
                break;
            default:
                break;
            }
            this._contentLoaded = true;
        }

        /// <summary>
        /// GetBindingConnector(int connectionId, object target)
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks"," 0.0.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::Windows.UI.Xaml.Markup.IComponentConnector GetBindingConnector(int connectionId, object target)
        {
            global::Windows.UI.Xaml.Markup.IComponentConnector returnValue = null;
            switch(connectionId)
            {
            case 1: // Views\Controls\MapWithTools.xaml line 1
                {                    
                    global::Windows.UI.Xaml.Controls.UserControl element1 = (global::Windows.UI.Xaml.Controls.UserControl)target;
                    MapWithTools_obj1_Bindings bindings = new MapWithTools_obj1_Bindings();
                    returnValue = bindings;
                    bindings.SetDataRoot(this);
                    this.Bindings = bindings;
                    element1.Loading += bindings.Loading;
                    global::Windows.UI.Xaml.Markup.XamlBindingHelper.SetDataTemplateComponent(element1, bindings);
                }
                break;
            case 3: // Views\Controls\MapWithTools.xaml line 12
                {                    
                    global::Windows.UI.Xaml.Controls.TextBlock element3 = (global::Windows.UI.Xaml.Controls.TextBlock)target;
                    MapWithTools_obj3_Bindings bindings = new MapWithTools_obj3_Bindings();
                    returnValue = bindings;
                    bindings.SetDataRoot(element3.DataContext);
                    element3.DataContextChanged += bindings.DataContextChangedHandler;
                    global::Windows.UI.Xaml.DataTemplate.SetExtensionInstance(element3, bindings);
                    global::Windows.UI.Xaml.Markup.XamlBindingHelper.SetDataTemplateComponent(element3, bindings);
                }
                break;
            case 21: // Views\Controls\MapWithTools.xaml line 68
                {                    
                    global::Windows.UI.Xaml.Controls.Grid element21 = (global::Windows.UI.Xaml.Controls.Grid)target;
                    MapWithTools_obj21_Bindings bindings = new MapWithTools_obj21_Bindings();
                    returnValue = bindings;
                    bindings.SetDataRoot(element21.DataContext);
                    element21.DataContextChanged += bindings.DataContextChangedHandler;
                    global::Windows.UI.Xaml.DataTemplate.SetExtensionInstance(element21, bindings);
                    global::Windows.UI.Xaml.Markup.XamlBindingHelper.SetDataTemplateComponent(element21, bindings);
                }
                break;
            }
            return returnValue;
        }
    }
}

