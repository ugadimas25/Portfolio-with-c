#pragma checksum "C:\Users\User\Downloads\arcgis-runtime-demos-dotnet-main\arcgis-runtime-demos-dotnet-main\src\OfflineWorkflowsSample\OfflineWorkflowsSample\Views\Controls\SceneWithTools.xaml" "{8829d00f-11b8-4213-878b-770e8597ac16}" "54C6B2915B4EA3D6BF07D17B5E069EB86E340231DB22EB07DDBE056733FD75A2"
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace OfflineWorkflowSample.Controls
{
    partial class SceneWithTools : 
        global::Windows.UI.Xaml.Controls.UserControl, 
        global::Windows.UI.Xaml.Markup.IComponentConnector,
        global::Windows.UI.Xaml.Markup.IComponentConnector2
    {
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks"," 0.0.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private static class XamlBindingSetters
        {
            public static void Set_Esri_ArcGISRuntime_UI_Controls_SceneView_Scene(global::Esri.ArcGISRuntime.UI.Controls.SceneView obj, global::Esri.ArcGISRuntime.Mapping.Scene value, string targetNullValue)
            {
                if (value == null && targetNullValue != null)
                {
                    value = global::Esri.ArcGISRuntime.CreateFromStringHelpers.CreateSceneFromStringUrl(targetNullValue);
                }
                obj.Scene = value;
            }
            public static void Set_Windows_UI_Xaml_Controls_ItemsControl_ItemsSource(global::Windows.UI.Xaml.Controls.ItemsControl obj, global::System.Object value, string targetNullValue)
            {
                if (value == null && targetNullValue != null)
                {
                    value = (global::System.Object) global::Windows.UI.Xaml.Markup.XamlBindingHelper.ConvertValue(typeof(global::System.Object), targetNullValue);
                }
                obj.ItemsSource = value;
            }
            public static void Set_Windows_UI_Xaml_Controls_TextBlock_Text(global::Windows.UI.Xaml.Controls.TextBlock obj, global::System.String value, string targetNullValue)
            {
                if (value == null && targetNullValue != null)
                {
                    value = targetNullValue;
                }
                obj.Text = value ?? global::System.String.Empty;
            }
            public static void Set_Esri_ArcGISRuntime_Toolkit_UI_Controls_Legend_GeoView(global::Esri.ArcGISRuntime.Toolkit.UI.Controls.Legend obj, global::Esri.ArcGISRuntime.UI.Controls.GeoView value, string targetNullValue)
            {
                if (value == null && targetNullValue != null)
                {
                    value = (global::Esri.ArcGISRuntime.UI.Controls.GeoView) global::Windows.UI.Xaml.Markup.XamlBindingHelper.ConvertValue(typeof(global::Esri.ArcGISRuntime.UI.Controls.GeoView), targetNullValue);
                }
                obj.GeoView = value;
            }
            public static void Set_Esri_ArcGISRuntime_Toolkit_UI_Controls_Compass_GeoView(global::Esri.ArcGISRuntime.Toolkit.UI.Controls.Compass obj, global::Esri.ArcGISRuntime.UI.Controls.GeoView value, string targetNullValue)
            {
                if (value == null && targetNullValue != null)
                {
                    value = (global::Esri.ArcGISRuntime.UI.Controls.GeoView) global::Windows.UI.Xaml.Markup.XamlBindingHelper.ConvertValue(typeof(global::Esri.ArcGISRuntime.UI.Controls.GeoView), targetNullValue);
                }
                obj.GeoView = value;
            }
            public static void Set_Windows_UI_Xaml_Controls_Image_Source(global::Windows.UI.Xaml.Controls.Image obj, global::Windows.UI.Xaml.Media.ImageSource value, string targetNullValue)
            {
                if (value == null && targetNullValue != null)
                {
                    value = (global::Windows.UI.Xaml.Media.ImageSource) global::Windows.UI.Xaml.Markup.XamlBindingHelper.ConvertValue(typeof(global::Windows.UI.Xaml.Media.ImageSource), targetNullValue);
                }
                obj.Source = value;
            }
            public static void Set_Windows_UI_Xaml_Controls_Primitives_ButtonBase_Command(global::Windows.UI.Xaml.Controls.Primitives.ButtonBase obj, global::System.Windows.Input.ICommand value, string targetNullValue)
            {
                if (value == null && targetNullValue != null)
                {
                    value = (global::System.Windows.Input.ICommand) global::Windows.UI.Xaml.Markup.XamlBindingHelper.ConvertValue(typeof(global::System.Windows.Input.ICommand), targetNullValue);
                }
                obj.Command = value;
            }
        };

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks"," 0.0.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private class SceneWithTools_obj3_Bindings :
            global::Windows.UI.Xaml.IDataTemplateExtension,
            global::Windows.UI.Xaml.Markup.IDataTemplateComponent,
            global::Windows.UI.Xaml.Markup.IXamlBindScopeDiagnostics,
            global::Windows.UI.Xaml.Markup.IComponentConnector,
            ISceneWithTools_Bindings
        {
            private global::Esri.ArcGISRuntime.Mapping.Layer dataRoot;
            private bool initialized = false;
            private const int NOT_PHASED = (1 << 31);
            private const int DATA_CHANGED = (1 << 30);
            private bool removedDataContextHandler = false;

            // Fields for each control that has bindings.
            private global::System.WeakReference obj3;

            // Static fields for each binding's enabled/disabled state
            private static bool isobj3TextDisabled = false;

            public SceneWithTools_obj3_Bindings()
            {
            }

            public void Disable(int lineNumber, int columnNumber)
            {
                if (lineNumber == 16 && columnNumber == 24)
                {
                    isobj3TextDisabled = true;
                }
            }

            // IComponentConnector

            public void Connect(int connectionId, global::System.Object target)
            {
                switch(connectionId)
                {
                    case 3: // Views\Controls\SceneWithTools.xaml line 16
                        this.obj3 = new global::System.WeakReference((global::Windows.UI.Xaml.Controls.TextBlock)target);
                        break;
                    default:
                        break;
                }
            }

            public void DataContextChangedHandler(global::Windows.UI.Xaml.FrameworkElement sender, global::Windows.UI.Xaml.DataContextChangedEventArgs args)
            {
                 if (this.SetDataRoot(args.NewValue))
                 {
                    this.Update();
                 }
            }

            // IDataTemplateExtension

            public bool ProcessBinding(uint phase)
            {
                throw new global::System.NotImplementedException();
            }

            public int ProcessBindings(global::Windows.UI.Xaml.Controls.ContainerContentChangingEventArgs args)
            {
                int nextPhase = -1;
                ProcessBindings(args.Item, args.ItemIndex, (int)args.Phase, out nextPhase);
                return nextPhase;
            }

            public void ResetTemplate()
            {
                Recycle();
            }

            // IDataTemplateComponent

            public void ProcessBindings(global::System.Object item, int itemIndex, int phase, out int nextPhase)
            {
                nextPhase = -1;
                switch(phase)
                {
                    case 0:
                        nextPhase = -1;
                        this.SetDataRoot(item);
                        if (!removedDataContextHandler)
                        {
                            removedDataContextHandler = true;
                            (this.obj3.Target as global::Windows.UI.Xaml.Controls.TextBlock).DataContextChanged -= this.DataContextChangedHandler;
                        }
                        this.initialized = true;
                        break;
                }
                this.Update_((global::Esri.ArcGISRuntime.Mapping.Layer) item, 1 << phase);
            }

            public void Recycle()
            {
            }

            // ISceneWithTools_Bindings

            public void Initialize()
            {
                if (!this.initialized)
                {
                    this.Update();
                }
            }
            
            public void Update()
            {
                this.Update_(this.dataRoot, NOT_PHASED);
                this.initialized = true;
            }

            public void StopTracking()
            {
            }

            public void DisconnectUnloadedObject(int connectionId)
            {
                throw new global::System.ArgumentException("No unloadable elements to disconnect.");
            }

            public bool SetDataRoot(global::System.Object newDataRoot)
            {
                if (newDataRoot != null)
                {
                    this.dataRoot = (global::Esri.ArcGISRuntime.Mapping.Layer)newDataRoot;
                    return true;
                }
                return false;
            }

            // Update methods for each path node used in binding steps.
            private void Update_(global::Esri.ArcGISRuntime.Mapping.Layer obj, int phase)
            {
                if (obj != null)
                {
                    if ((phase & (NOT_PHASED | (1 << 0))) != 0)
                    {
                        this.Update_Name(obj.Name, phase);
                    }
                }
            }
            private void Update_Name(global::System.String obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED )) != 0)
                {
                    // Views\Controls\SceneWithTools.xaml line 16
                    if (!isobj3TextDisabled)
                    {
                        if ((this.obj3.Target as global::Windows.UI.Xaml.Controls.TextBlock) != null)
                        {
                            XamlBindingSetters.Set_Windows_UI_Xaml_Controls_TextBlock_Text((this.obj3.Target as global::Windows.UI.Xaml.Controls.TextBlock), obj, null);
                        }
                    }
                }
            }
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks"," 0.0.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private class SceneWithTools_obj18_Bindings :
            global::Windows.UI.Xaml.IDataTemplateExtension,
            global::Windows.UI.Xaml.Markup.IDataTemplateComponent,
            global::Windows.UI.Xaml.Markup.IXamlBindScopeDiagnostics,
            global::Windows.UI.Xaml.Markup.IComponentConnector,
            ISceneWithTools_Bindings
        {
            private global::Esri.ArcGISRuntime.Mapping.Basemap dataRoot;
            private bool initialized = false;
            private const int NOT_PHASED = (1 << 31);
            private const int DATA_CHANGED = (1 << 30);
            private bool removedDataContextHandler = false;

            // Fields for each control that has bindings.
            private global::System.WeakReference obj18;
            private global::Windows.UI.Xaml.Controls.TextBlock obj19;

            // Static fields for each binding's enabled/disabled state
            private static bool isobj19TextDisabled = false;

            public SceneWithTools_obj18_Bindings()
            {
            }

            public void Disable(int lineNumber, int columnNumber)
            {
                if (lineNumber == 75 && columnNumber == 57)
                {
                    isobj19TextDisabled = true;
                }
            }

            // IComponentConnector

            public void Connect(int connectionId, global::System.Object target)
            {
                switch(connectionId)
                {
                    case 18: // Views\Controls\SceneWithTools.xaml line 57
                        this.obj18 = new global::System.WeakReference((global::Windows.UI.Xaml.Controls.Grid)target);
                        break;
                    case 19: // Views\Controls\SceneWithTools.xaml line 72
                        this.obj19 = (global::Windows.UI.Xaml.Controls.TextBlock)target;
                        break;
                    default:
                        break;
                }
            }

            public void DataContextChangedHandler(global::Windows.UI.Xaml.FrameworkElement sender, global::Windows.UI.Xaml.DataContextChangedEventArgs args)
            {
                 if (this.SetDataRoot(args.NewValue))
                 {
                    this.Update();
                 }
            }

            // IDataTemplateExtension

            public bool ProcessBinding(uint phase)
            {
                throw new global::System.NotImplementedException();
            }

            public int ProcessBindings(global::Windows.UI.Xaml.Controls.ContainerContentChangingEventArgs args)
            {
                int nextPhase = -1;
                ProcessBindings(args.Item, args.ItemIndex, (int)args.Phase, out nextPhase);
                return nextPhase;
            }

            public void ResetTemplate()
            {
                Recycle();
            }

            // IDataTemplateComponent

            public void ProcessBindings(global::System.Object item, int itemIndex, int phase, out int nextPhase)
            {
                nextPhase = -1;
                switch(phase)
                {
                    case 0:
                        nextPhase = -1;
                        this.SetDataRoot(item);
                        if (!removedDataContextHandler)
                        {
                            removedDataContextHandler = true;
                            (this.obj18.Target as global::Windows.UI.Xaml.Controls.Grid).DataContextChanged -= this.DataContextChangedHandler;
                        }
                        this.initialized = true;
                        break;
                }
                this.Update_((global::Esri.ArcGISRuntime.Mapping.Basemap) item, 1 << phase);
            }

            public void Recycle()
            {
            }

            // ISceneWithTools_Bindings

            public void Initialize()
            {
                if (!this.initialized)
                {
                    this.Update();
                }
            }
            
            public void Update()
            {
                this.Update_(this.dataRoot, NOT_PHASED);
                this.initialized = true;
            }

            public void StopTracking()
            {
            }

            public void DisconnectUnloadedObject(int connectionId)
            {
                throw new global::System.ArgumentException("No unloadable elements to disconnect.");
            }

            public bool SetDataRoot(global::System.Object newDataRoot)
            {
                if (newDataRoot != null)
                {
                    this.dataRoot = (global::Esri.ArcGISRuntime.Mapping.Basemap)newDataRoot;
                    return true;
                }
                return false;
            }

            // Update methods for each path node used in binding steps.
            private void Update_(global::Esri.ArcGISRuntime.Mapping.Basemap obj, int phase)
            {
                if (obj != null)
                {
                    if ((phase & (NOT_PHASED | (1 << 0))) != 0)
                    {
                        this.Update_Name(obj.Name, phase);
                    }
                }
            }
            private void Update_Name(global::System.String obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED )) != 0)
                {
                    // Views\Controls\SceneWithTools.xaml line 72
                    if (!isobj19TextDisabled)
                    {
                        XamlBindingSetters.Set_Windows_UI_Xaml_Controls_TextBlock_Text(this.obj19, obj, null);
                    }
                }
            }
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks"," 0.0.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private class SceneWithTools_obj1_Bindings :
            global::Windows.UI.Xaml.Markup.IDataTemplateComponent,
            global::Windows.UI.Xaml.Markup.IXamlBindScopeDiagnostics,
            global::Windows.UI.Xaml.Markup.IComponentConnector,
            ISceneWithTools_Bindings
        {
            private global::OfflineWorkflowSample.Controls.SceneWithTools dataRoot;
            private bool initialized = false;
            private const int NOT_PHASED = (1 << 31);
            private const int DATA_CHANGED = (1 << 30);

            // Fields for each control that has bindings.
            private global::Windows.UI.Xaml.Controls.ListView obj6;
            private global::Windows.UI.Xaml.Controls.TextBlock obj7;
            private global::Esri.ArcGISRuntime.Toolkit.UI.Controls.Legend obj8;
            private global::Windows.UI.Xaml.Controls.TextBlock obj9;
            private global::Windows.UI.Xaml.Controls.Image obj10;
            private global::Windows.UI.Xaml.Controls.TextBlock obj11;
            private global::Windows.UI.Xaml.Controls.Button obj12;
            private global::Esri.ArcGISRuntime.UI.Controls.SceneView obj13;
            private global::Esri.ArcGISRuntime.Toolkit.UI.Controls.Compass obj14;
            private global::Windows.UI.Xaml.Controls.GridView obj16;

            // Static fields for each binding's enabled/disabled state
            private static bool isobj6ItemsSourceDisabled = false;
            private static bool isobj7TextDisabled = false;
            private static bool isobj8GeoViewDisabled = false;
            private static bool isobj9TextDisabled = false;
            private static bool isobj10SourceDisabled = false;
            private static bool isobj11TextDisabled = false;
            private static bool isobj12CommandDisabled = false;
            private static bool isobj13SceneDisabled = false;
            private static bool isobj14GeoViewDisabled = false;
            private static bool isobj16ItemsSourceDisabled = false;

            private SceneWithTools_obj1_BindingsTracking bindingsTracking;

            public SceneWithTools_obj1_Bindings()
            {
                this.bindingsTracking = new SceneWithTools_obj1_BindingsTracking(this);
            }

            public void Disable(int lineNumber, int columnNumber)
            {
                if (lineNumber == 116 && columnNumber == 89)
                {
                    isobj6ItemsSourceDisabled = true;
                }
                else if (lineNumber == 118 && columnNumber == 60)
                {
                    isobj7TextDisabled = true;
                }
                else if (lineNumber == 110 && columnNumber == 39)
                {
                    isobj8GeoViewDisabled = true;
                }
                else if (lineNumber == 96 && columnNumber == 88)
                {
                    isobj9TextDisabled = true;
                }
                else if (lineNumber == 97 && columnNumber == 47)
                {
                    isobj10SourceDisabled = true;
                }
                else if (lineNumber == 100 && columnNumber == 33)
                {
                    isobj11TextDisabled = true;
                }
                else if (lineNumber == 104 && columnNumber == 33)
                {
                    isobj12CommandDisabled = true;
                }
                else if (lineNumber == 25 && columnNumber == 54)
                {
                    isobj13SceneDisabled = true;
                }
                else if (lineNumber == 33 && columnNumber == 17)
                {
                    isobj14GeoViewDisabled = true;
                }
                else if (lineNumber == 53 && columnNumber == 37)
                {
                    isobj16ItemsSourceDisabled = true;
                }
            }

            // IComponentConnector

            public void Connect(int connectionId, global::System.Object target)
            {
                switch(connectionId)
                {
                    case 6: // Views\Controls\SceneWithTools.xaml line 116
                        this.obj6 = (global::Windows.UI.Xaml.Controls.ListView)target;
                        break;
                    case 7: // Views\Controls\SceneWithTools.xaml line 118
                        this.obj7 = (global::Windows.UI.Xaml.Controls.TextBlock)target;
                        break;
                    case 8: // Views\Controls\SceneWithTools.xaml line 110
                        this.obj8 = (global::Esri.ArcGISRuntime.Toolkit.UI.Controls.Legend)target;
                        break;
                    case 9: // Views\Controls\SceneWithTools.xaml line 96
                        this.obj9 = (global::Windows.UI.Xaml.Controls.TextBlock)target;
                        break;
                    case 10: // Views\Controls\SceneWithTools.xaml line 97
                        this.obj10 = (global::Windows.UI.Xaml.Controls.Image)target;
                        break;
                    case 11: // Views\Controls\SceneWithTools.xaml line 98
                        this.obj11 = (global::Windows.UI.Xaml.Controls.TextBlock)target;
                        break;
                    case 12: // Views\Controls\SceneWithTools.xaml line 102
                        this.obj12 = (global::Windows.UI.Xaml.Controls.Button)target;
                        break;
                    case 13: // Views\Controls\SceneWithTools.xaml line 25
                        this.obj13 = (global::Esri.ArcGISRuntime.UI.Controls.SceneView)target;
                        break;
                    case 14: // Views\Controls\SceneWithTools.xaml line 26
                        this.obj14 = (global::Esri.ArcGISRuntime.Toolkit.UI.Controls.Compass)target;
                        break;
                    case 16: // Views\Controls\SceneWithTools.xaml line 51
                        this.obj16 = (global::Windows.UI.Xaml.Controls.GridView)target;
                        break;
                    default:
                        break;
                }
            }

            // IDataTemplateComponent

            public void ProcessBindings(global::System.Object item, int itemIndex, int phase, out int nextPhase)
            {
                nextPhase = -1;
            }

            public void Recycle()
            {
                return;
            }

            // ISceneWithTools_Bindings

            public void Initialize()
            {
                if (!this.initialized)
                {
                    this.Update();
                }
            }
            
            public void Update()
            {
                this.Update_(this.dataRoot, NOT_PHASED);
                this.initialized = true;
            }

            public void StopTracking()
            {
                this.bindingsTracking.ReleaseAllListeners();
                this.initialized = false;
            }

            public void DisconnectUnloadedObject(int connectionId)
            {
                throw new global::System.ArgumentException("No unloadable elements to disconnect.");
            }

            public bool SetDataRoot(global::System.Object newDataRoot)
            {
                this.bindingsTracking.ReleaseAllListeners();
                if (newDataRoot != null)
                {
                    this.dataRoot = (global::OfflineWorkflowSample.Controls.SceneWithTools)newDataRoot;
                    return true;
                }
                return false;
            }

            public void Loading(global::Windows.UI.Xaml.FrameworkElement src, object data)
            {
                this.Initialize();
            }

            // Update methods for each path node used in binding steps.
            private void Update_(global::OfflineWorkflowSample.Controls.SceneWithTools obj, int phase)
            {
                this.bindingsTracking.UpdateChildListeners_(obj);
                if (obj != null)
                {
                    if ((phase & (NOT_PHASED | DATA_CHANGED | (1 << 0))) != 0)
                    {
                        this.Update_Scene(obj.Scene, phase);
                        this.Update_MySceneView(obj.MySceneView, phase);
                        this.Update_Item(obj.Item, phase);
                    }
                    if ((phase & (NOT_PHASED | (1 << 0))) != 0)
                    {
                        this.Update_ViewModel(obj.ViewModel, phase);
                    }
                }
            }
            private void Update_Scene(global::Esri.ArcGISRuntime.Mapping.Scene obj, int phase)
            {
                this.bindingsTracking.UpdateChildListeners_Scene(obj);
                if (obj != null)
                {
                    if ((phase & (NOT_PHASED | DATA_CHANGED | (1 << 0))) != 0)
                    {
                        this.Update_Scene_OperationalLayers(obj.OperationalLayers, phase);
                        this.Update_Scene_Basemap(obj.Basemap, phase);
                    }
                }
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // Views\Controls\SceneWithTools.xaml line 25
                    if (!isobj13SceneDisabled)
                    {
                        XamlBindingSetters.Set_Esri_ArcGISRuntime_UI_Controls_SceneView_Scene(this.obj13, obj, null);
                    }
                }
            }
            private void Update_Scene_OperationalLayers(global::Esri.ArcGISRuntime.Mapping.LayerCollection obj, int phase)
            {
                this.bindingsTracking.UpdateChildListeners_Scene_OperationalLayers(obj);
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // Views\Controls\SceneWithTools.xaml line 116
                    if (!isobj6ItemsSourceDisabled)
                    {
                        XamlBindingSetters.Set_Windows_UI_Xaml_Controls_ItemsControl_ItemsSource(this.obj6, obj, null);
                    }
                }
            }
            private void Update_Scene_Basemap(global::Esri.ArcGISRuntime.Mapping.Basemap obj, int phase)
            {
                this.bindingsTracking.UpdateChildListeners_Scene_Basemap(obj);
                if (obj != null)
                {
                    if ((phase & (NOT_PHASED | DATA_CHANGED | (1 << 0))) != 0)
                    {
                        this.Update_Scene_Basemap_Name(obj.Name, phase);
                    }
                }
            }
            private void Update_Scene_Basemap_Name(global::System.String obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // Views\Controls\SceneWithTools.xaml line 118
                    if (!isobj7TextDisabled)
                    {
                        XamlBindingSetters.Set_Windows_UI_Xaml_Controls_TextBlock_Text(this.obj7, obj, null);
                    }
                }
            }
            private void Update_MySceneView(global::Esri.ArcGISRuntime.UI.Controls.SceneView obj, int phase)
            {
                this.bindingsTracking.UpdateChildListeners_MySceneView(obj);
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // Views\Controls\SceneWithTools.xaml line 26
                    if (!isobj14GeoViewDisabled)
                    {
                        XamlBindingSetters.Set_Esri_ArcGISRuntime_Toolkit_UI_Controls_Compass_GeoView(this.obj14, obj, null);
                    }
                }
                if ((phase & ((1 << 0) | NOT_PHASED )) != 0)
                {
                    // Views\Controls\SceneWithTools.xaml line 110
                    if (!isobj8GeoViewDisabled)
                    {
                        XamlBindingSetters.Set_Esri_ArcGISRuntime_Toolkit_UI_Controls_Legend_GeoView(this.obj8, obj, null);
                    }
                }
            }
            private void Update_Item(global::OfflineWorkflowSample.ViewModels.PortalItemViewModel obj, int phase)
            {
                this.bindingsTracking.UpdateChildListeners_Item(obj);
                if (obj != null)
                {
                    if ((phase & (NOT_PHASED | DATA_CHANGED | (1 << 0))) != 0)
                    {
                        this.Update_Item_Item(obj.Item, phase);
                        this.Update_Item_Thumbnail(obj.Thumbnail, phase);
                    }
                }
            }
            private void Update_Item_Item(global::Esri.ArcGISRuntime.Portal.Item obj, int phase)
            {
                this.bindingsTracking.UpdateChildListeners_Item_Item(obj);
                if (obj != null)
                {
                    if ((phase & (NOT_PHASED | DATA_CHANGED | (1 << 0))) != 0)
                    {
                        this.Update_Item_Item_Title(obj.Title, phase);
                        this.Update_Item_Item_Description(obj.Description, phase);
                    }
                }
            }
            private void Update_Item_Item_Title(global::System.String obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // Views\Controls\SceneWithTools.xaml line 96
                    if (!isobj9TextDisabled)
                    {
                        XamlBindingSetters.Set_Windows_UI_Xaml_Controls_TextBlock_Text(this.obj9, obj, null);
                    }
                }
            }
            private void Update_Item_Thumbnail(global::Windows.UI.Xaml.Media.ImageSource obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // Views\Controls\SceneWithTools.xaml line 97
                    if (!isobj10SourceDisabled)
                    {
                        XamlBindingSetters.Set_Windows_UI_Xaml_Controls_Image_Source(this.obj10, obj, null);
                    }
                }
            }
            private void Update_Item_Item_Description(global::System.String obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // Views\Controls\SceneWithTools.xaml line 98
                    if (!isobj11TextDisabled)
                    {
                        XamlBindingSetters.Set_Windows_UI_Xaml_Controls_TextBlock_Text(this.obj11, obj, null);
                    }
                }
            }
            private void Update_ViewModel(global::OfflineWorkflowsSample.MainViewModel obj, int phase)
            {
                if (obj != null)
                {
                    if ((phase & (NOT_PHASED | (1 << 0))) != 0)
                    {
                        this.Update_ViewModel_OpenItemInAgolCommand(obj.OpenItemInAgolCommand, phase);
                        this.Update_ViewModel_PortalViewModel(obj.PortalViewModel, phase);
                    }
                }
            }
            private void Update_ViewModel_OpenItemInAgolCommand(global::System.Windows.Input.ICommand obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED )) != 0)
                {
                    // Views\Controls\SceneWithTools.xaml line 102
                    if (!isobj12CommandDisabled)
                    {
                        XamlBindingSetters.Set_Windows_UI_Xaml_Controls_Primitives_ButtonBase_Command(this.obj12, obj, null);
                    }
                }
            }
            private void Update_ViewModel_PortalViewModel(global::OfflineWorkflowSample.PortalViewModel obj, int phase)
            {
                if (obj != null)
                {
                    if ((phase & (NOT_PHASED | (1 << 0))) != 0)
                    {
                        this.Update_ViewModel_PortalViewModel_OrgBasemaps(obj.OrgBasemaps, phase);
                    }
                }
            }
            private void Update_ViewModel_PortalViewModel_OrgBasemaps(global::System.Collections.Generic.List<global::Esri.ArcGISRuntime.Mapping.Basemap> obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED )) != 0)
                {
                    // Views\Controls\SceneWithTools.xaml line 51
                    if (!isobj16ItemsSourceDisabled)
                    {
                        XamlBindingSetters.Set_Windows_UI_Xaml_Controls_ItemsControl_ItemsSource(this.obj16, obj, null);
                    }
                }
            }

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks"," 0.0.0.0")]
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private class SceneWithTools_obj1_BindingsTracking
            {
                private global::System.WeakReference<SceneWithTools_obj1_Bindings> weakRefToBindingObj; 

                public SceneWithTools_obj1_BindingsTracking(SceneWithTools_obj1_Bindings obj)
                {
                    weakRefToBindingObj = new global::System.WeakReference<SceneWithTools_obj1_Bindings>(obj);
                }

                public SceneWithTools_obj1_Bindings TryGetBindingObject()
                {
                    SceneWithTools_obj1_Bindings bindingObject = null;
                    if (weakRefToBindingObj != null)
                    {
                        weakRefToBindingObj.TryGetTarget(out bindingObject);
                        if (bindingObject == null)
                        {
                            weakRefToBindingObj = null;
                            ReleaseAllListeners();
                        }
                    }
                    return bindingObject;
                }

                public void ReleaseAllListeners()
                {
                    UpdateChildListeners_(null);
                    UpdateChildListeners_Scene(null);
                    UpdateChildListeners_Scene_OperationalLayers(null);
                    UpdateChildListeners_Scene_Basemap(null);
                    UpdateChildListeners_MySceneView(null);
                    UpdateChildListeners_Item(null);
                    UpdateChildListeners_Item_Item(null);
                }

                public void DependencyPropertyChanged_Scene(global::Windows.UI.Xaml.DependencyObject sender, global::Windows.UI.Xaml.DependencyProperty prop)
                {
                    SceneWithTools_obj1_Bindings bindings = TryGetBindingObject();
                    if (bindings != null)
                    {
                        global::OfflineWorkflowSample.Controls.SceneWithTools obj = sender as global::OfflineWorkflowSample.Controls.SceneWithTools;
                        if (obj != null)
                        {
                            bindings.Update_Scene(obj.Scene, DATA_CHANGED);
                        }
                    }
                }
                public void DependencyPropertyChanged_Item(global::Windows.UI.Xaml.DependencyObject sender, global::Windows.UI.Xaml.DependencyProperty prop)
                {
                    SceneWithTools_obj1_Bindings bindings = TryGetBindingObject();
                    if (bindings != null)
                    {
                        global::OfflineWorkflowSample.Controls.SceneWithTools obj = sender as global::OfflineWorkflowSample.Controls.SceneWithTools;
                        if (obj != null)
                        {
                            bindings.Update_Item(obj.Item, DATA_CHANGED);
                        }
                    }
                }
                private long tokenDPC_Scene = 0;
                private long tokenDPC_Item = 0;
                public void UpdateChildListeners_(global::OfflineWorkflowSample.Controls.SceneWithTools obj)
                {
                    SceneWithTools_obj1_Bindings bindings = TryGetBindingObject();
                    if (bindings != null)
                    {
                        if (bindings.dataRoot != null)
                        {
                            bindings.dataRoot.UnregisterPropertyChangedCallback(global::OfflineWorkflowSample.Controls.SceneWithTools.SceneProperty, tokenDPC_Scene);
                            bindings.dataRoot.UnregisterPropertyChangedCallback(global::OfflineWorkflowSample.Controls.SceneWithTools.ItemProperty, tokenDPC_Item);
                        }
                        if (obj != null)
                        {
                            bindings.dataRoot = obj;
                            tokenDPC_Scene = obj.RegisterPropertyChangedCallback(global::OfflineWorkflowSample.Controls.SceneWithTools.SceneProperty, DependencyPropertyChanged_Scene);
                            tokenDPC_Item = obj.RegisterPropertyChangedCallback(global::OfflineWorkflowSample.Controls.SceneWithTools.ItemProperty, DependencyPropertyChanged_Item);
                        }
                    }
                }
                public void PropertyChanged_Scene(object sender, global::System.ComponentModel.PropertyChangedEventArgs e)
                {
                    SceneWithTools_obj1_Bindings bindings = TryGetBindingObject();
                    if (bindings != null)
                    {
                        string propName = e.PropertyName;
                        global::Esri.ArcGISRuntime.Mapping.Scene obj = sender as global::Esri.ArcGISRuntime.Mapping.Scene;
                        if (global::System.String.IsNullOrEmpty(propName))
                        {
                            if (obj != null)
                            {
                                bindings.Update_Scene_OperationalLayers(obj.OperationalLayers, DATA_CHANGED);
                                bindings.Update_Scene_Basemap(obj.Basemap, DATA_CHANGED);
                            }
                        }
                        else
                        {
                            switch (propName)
                            {
                                case "OperationalLayers":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_Scene_OperationalLayers(obj.OperationalLayers, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "Basemap":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_Scene_Basemap(obj.Basemap, DATA_CHANGED);
                                    }
                                    break;
                                }
                                default:
                                    break;
                            }
                        }
                    }
                }
                private global::Esri.ArcGISRuntime.Mapping.Scene cache_Scene = null;
                public void UpdateChildListeners_Scene(global::Esri.ArcGISRuntime.Mapping.Scene obj)
                {
                    if (obj != cache_Scene)
                    {
                        if (cache_Scene != null)
                        {
                            ((global::System.ComponentModel.INotifyPropertyChanged)cache_Scene).PropertyChanged -= PropertyChanged_Scene;
                            cache_Scene = null;
                        }
                        if (obj != null)
                        {
                            cache_Scene = obj;
                            ((global::System.ComponentModel.INotifyPropertyChanged)obj).PropertyChanged += PropertyChanged_Scene;
                        }
                    }
                }
                public void PropertyChanged_Scene_OperationalLayers(object sender, global::System.ComponentModel.PropertyChangedEventArgs e)
                {
                    SceneWithTools_obj1_Bindings bindings = TryGetBindingObject();
                    if (bindings != null)
                    {
                        string propName = e.PropertyName;
                        global::Esri.ArcGISRuntime.Mapping.LayerCollection obj = sender as global::Esri.ArcGISRuntime.Mapping.LayerCollection;
                        if (global::System.String.IsNullOrEmpty(propName))
                        {
                        }
                        else
                        {
                            switch (propName)
                            {
                                default:
                                    break;
                            }
                        }
                    }
                }
                public void CollectionChanged_Scene_OperationalLayers(object sender, global::System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
                {
                    SceneWithTools_obj1_Bindings bindings = TryGetBindingObject();
                    if (bindings != null)
                    {
                        global::Esri.ArcGISRuntime.Mapping.LayerCollection obj = sender as global::Esri.ArcGISRuntime.Mapping.LayerCollection;
                    }
                }
                private global::Esri.ArcGISRuntime.Mapping.LayerCollection cache_Scene_OperationalLayers = null;
                public void UpdateChildListeners_Scene_OperationalLayers(global::Esri.ArcGISRuntime.Mapping.LayerCollection obj)
                {
                    if (obj != cache_Scene_OperationalLayers)
                    {
                        if (cache_Scene_OperationalLayers != null)
                        {
                            ((global::System.ComponentModel.INotifyPropertyChanged)cache_Scene_OperationalLayers).PropertyChanged -= PropertyChanged_Scene_OperationalLayers;
                            ((global::System.Collections.Specialized.INotifyCollectionChanged)cache_Scene_OperationalLayers).CollectionChanged -= CollectionChanged_Scene_OperationalLayers;
                            cache_Scene_OperationalLayers = null;
                        }
                        if (obj != null)
                        {
                            cache_Scene_OperationalLayers = obj;
                            ((global::System.ComponentModel.INotifyPropertyChanged)obj).PropertyChanged += PropertyChanged_Scene_OperationalLayers;
                            ((global::System.Collections.Specialized.INotifyCollectionChanged)obj).CollectionChanged += CollectionChanged_Scene_OperationalLayers;
                        }
                    }
                }
                public void PropertyChanged_Scene_Basemap(object sender, global::System.ComponentModel.PropertyChangedEventArgs e)
                {
                    SceneWithTools_obj1_Bindings bindings = TryGetBindingObject();
                    if (bindings != null)
                    {
                        string propName = e.PropertyName;
                        global::Esri.ArcGISRuntime.Mapping.Basemap obj = sender as global::Esri.ArcGISRuntime.Mapping.Basemap;
                        if (global::System.String.IsNullOrEmpty(propName))
                        {
                            if (obj != null)
                            {
                                bindings.Update_Scene_Basemap_Name(obj.Name, DATA_CHANGED);
                            }
                        }
                        else
                        {
                            switch (propName)
                            {
                                case "Name":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_Scene_Basemap_Name(obj.Name, DATA_CHANGED);
                                    }
                                    break;
                                }
                                default:
                                    break;
                            }
                        }
                    }
                }
                private global::Esri.ArcGISRuntime.Mapping.Basemap cache_Scene_Basemap = null;
                public void UpdateChildListeners_Scene_Basemap(global::Esri.ArcGISRuntime.Mapping.Basemap obj)
                {
                    if (obj != cache_Scene_Basemap)
                    {
                        if (cache_Scene_Basemap != null)
                        {
                            ((global::System.ComponentModel.INotifyPropertyChanged)cache_Scene_Basemap).PropertyChanged -= PropertyChanged_Scene_Basemap;
                            cache_Scene_Basemap = null;
                        }
                        if (obj != null)
                        {
                            cache_Scene_Basemap = obj;
                            ((global::System.ComponentModel.INotifyPropertyChanged)obj).PropertyChanged += PropertyChanged_Scene_Basemap;
                        }
                    }
                }
                public void PropertyChanged_MySceneView(object sender, global::System.ComponentModel.PropertyChangedEventArgs e)
                {
                    SceneWithTools_obj1_Bindings bindings = TryGetBindingObject();
                    if (bindings != null)
                    {
                        string propName = e.PropertyName;
                        global::Esri.ArcGISRuntime.UI.Controls.SceneView obj = sender as global::Esri.ArcGISRuntime.UI.Controls.SceneView;
                        if (global::System.String.IsNullOrEmpty(propName))
                        {
                        }
                        else
                        {
                            switch (propName)
                            {
                                default:
                                    break;
                            }
                        }
                    }
                }
                private global::Esri.ArcGISRuntime.UI.Controls.SceneView cache_MySceneView = null;
                public void UpdateChildListeners_MySceneView(global::Esri.ArcGISRuntime.UI.Controls.SceneView obj)
                {
                    if (obj != cache_MySceneView)
                    {
                        if (cache_MySceneView != null)
                        {
                            ((global::System.ComponentModel.INotifyPropertyChanged)cache_MySceneView).PropertyChanged -= PropertyChanged_MySceneView;
                            cache_MySceneView = null;
                        }
                        if (obj != null)
                        {
                            cache_MySceneView = obj;
                            ((global::System.ComponentModel.INotifyPropertyChanged)obj).PropertyChanged += PropertyChanged_MySceneView;
                        }
                    }
                }
                public void PropertyChanged_Item(object sender, global::System.ComponentModel.PropertyChangedEventArgs e)
                {
                    SceneWithTools_obj1_Bindings bindings = TryGetBindingObject();
                    if (bindings != null)
                    {
                        string propName = e.PropertyName;
                        global::OfflineWorkflowSample.ViewModels.PortalItemViewModel obj = sender as global::OfflineWorkflowSample.ViewModels.PortalItemViewModel;
                        if (global::System.String.IsNullOrEmpty(propName))
                        {
                            if (obj != null)
                            {
                                bindings.Update_Item_Item(obj.Item, DATA_CHANGED);
                                bindings.Update_Item_Thumbnail(obj.Thumbnail, DATA_CHANGED);
                            }
                        }
                        else
                        {
                            switch (propName)
                            {
                                case "Item":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_Item_Item(obj.Item, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "Thumbnail":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_Item_Thumbnail(obj.Thumbnail, DATA_CHANGED);
                                    }
                                    break;
                                }
                                default:
                                    break;
                            }
                        }
                    }
                }
                private global::OfflineWorkflowSample.ViewModels.PortalItemViewModel cache_Item = null;
                public void UpdateChildListeners_Item(global::OfflineWorkflowSample.ViewModels.PortalItemViewModel obj)
                {
                    if (obj != cache_Item)
                    {
                        if (cache_Item != null)
                        {
                            ((global::System.ComponentModel.INotifyPropertyChanged)cache_Item).PropertyChanged -= PropertyChanged_Item;
                            cache_Item = null;
                        }
                        if (obj != null)
                        {
                            cache_Item = obj;
                            ((global::System.ComponentModel.INotifyPropertyChanged)obj).PropertyChanged += PropertyChanged_Item;
                        }
                    }
                }
                public void PropertyChanged_Item_Item(object sender, global::System.ComponentModel.PropertyChangedEventArgs e)
                {
                    SceneWithTools_obj1_Bindings bindings = TryGetBindingObject();
                    if (bindings != null)
                    {
                        string propName = e.PropertyName;
                        global::Esri.ArcGISRuntime.Portal.Item obj = sender as global::Esri.ArcGISRuntime.Portal.Item;
                        if (global::System.String.IsNullOrEmpty(propName))
                        {
                            if (obj != null)
                            {
                                bindings.Update_Item_Item_Title(obj.Title, DATA_CHANGED);
                                bindings.Update_Item_Item_Description(obj.Description, DATA_CHANGED);
                            }
                        }
                        else
                        {
                            switch (propName)
                            {
                                case "Title":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_Item_Item_Title(obj.Title, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "Description":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_Item_Item_Description(obj.Description, DATA_CHANGED);
                                    }
                                    break;
                                }
                                default:
                                    break;
                            }
                        }
                    }
                }
                private global::Esri.ArcGISRuntime.Portal.Item cache_Item_Item = null;
                public void UpdateChildListeners_Item_Item(global::Esri.ArcGISRuntime.Portal.Item obj)
                {
                    if (obj != cache_Item_Item)
                    {
                        if (cache_Item_Item != null)
                        {
                            ((global::System.ComponentModel.INotifyPropertyChanged)cache_Item_Item).PropertyChanged -= PropertyChanged_Item_Item;
                            cache_Item_Item = null;
                        }
                        if (obj != null)
                        {
                            cache_Item_Item = obj;
                            ((global::System.ComponentModel.INotifyPropertyChanged)obj).PropertyChanged += PropertyChanged_Item_Item;
                        }
                    }
                }
            }
        }
        /// <summary>
        /// Connect()
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks"," 0.0.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public void Connect(int connectionId, object target)
        {
            switch(connectionId)
            {
            case 4: // Views\Controls\SceneWithTools.xaml line 88
                {
                    this.BonusSidebar = (global::Windows.UI.Xaml.Controls.Grid)(target);
                }
                break;
            case 5: // Views\Controls\SceneWithTools.xaml line 92
                {
                    this.OuterPivot = (global::Windows.UI.Xaml.Controls.Pivot)(target);
                }
                break;
            case 13: // Views\Controls\SceneWithTools.xaml line 25
                {
                    this.MySceneView = (global::Esri.ArcGISRuntime.UI.Controls.SceneView)(target);
                }
                break;
            case 15: // Views\Controls\SceneWithTools.xaml line 42
                {
                    global::Windows.UI.Xaml.Controls.AppBarButton element15 = (global::Windows.UI.Xaml.Controls.AppBarButton)(target);
                    ((global::Windows.UI.Xaml.Controls.AppBarButton)element15).Click += this.MenuButtonClicked;
                }
                break;
            default:
                break;
            }
            this._contentLoaded = true;
        }

        /// <summary>
        /// GetBindingConnector(int connectionId, object target)
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks"," 0.0.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::Windows.UI.Xaml.Markup.IComponentConnector GetBindingConnector(int connectionId, object target)
        {
            global::Windows.UI.Xaml.Markup.IComponentConnector returnValue = null;
            switch(connectionId)
            {
            case 1: // Views\Controls\SceneWithTools.xaml line 1
                {                    
                    global::Windows.UI.Xaml.Controls.UserControl element1 = (global::Windows.UI.Xaml.Controls.UserControl)target;
                    SceneWithTools_obj1_Bindings bindings = new SceneWithTools_obj1_Bindings();
                    returnValue = bindings;
                    bindings.SetDataRoot(this);
                    this.Bindings = bindings;
                    element1.Loading += bindings.Loading;
                    global::Windows.UI.Xaml.Markup.XamlBindingHelper.SetDataTemplateComponent(element1, bindings);
                }
                break;
            case 3: // Views\Controls\SceneWithTools.xaml line 16
                {                    
                    global::Windows.UI.Xaml.Controls.TextBlock element3 = (global::Windows.UI.Xaml.Controls.TextBlock)target;
                    SceneWithTools_obj3_Bindings bindings = new SceneWithTools_obj3_Bindings();
                    returnValue = bindings;
                    bindings.SetDataRoot(element3.DataContext);
                    element3.DataContextChanged += bindings.DataContextChangedHandler;
                    global::Windows.UI.Xaml.DataTemplate.SetExtensionInstance(element3, bindings);
                    global::Windows.UI.Xaml.Markup.XamlBindingHelper.SetDataTemplateComponent(element3, bindings);
                }
                break;
            case 18: // Views\Controls\SceneWithTools.xaml line 57
                {                    
                    global::Windows.UI.Xaml.Controls.Grid element18 = (global::Windows.UI.Xaml.Controls.Grid)target;
                    SceneWithTools_obj18_Bindings bindings = new SceneWithTools_obj18_Bindings();
                    returnValue = bindings;
                    bindings.SetDataRoot(element18.DataContext);
                    element18.DataContextChanged += bindings.DataContextChangedHandler;
                    global::Windows.UI.Xaml.DataTemplate.SetExtensionInstance(element18, bindings);
                    global::Windows.UI.Xaml.Markup.XamlBindingHelper.SetDataTemplateComponent(element18, bindings);
                }
                break;
            }
            return returnValue;
        }
    }
}

